Hello and welcome to my Ted talk. The title may seem daunting
but stay with me. 
*click*
I am Comparing the effectiveness of machine learning against 
more traditional optimization algorithms for path-finding.
So we've all been hearing various stories in the news about new
revolutionary AI. Big data coupled with the processing speeds of
today have enabled large scale statistical analysis.
The field that specifically got me interested
was self driving cars *** Amazing inventions but how 
safe/effective are they?
I wanted to - albeit on a much smaller scale - compare the
new proposed techniques with alternatives. Not necessarily to 
see which is better and discredit one as 'flawed' or 'old news'
but to draw comparisons and see where the differences lie and 
the correct times to apply each approach. Does ML find a working
route faster then A* finds the optimal route?

That said - Bring out the contenders!
Machine Learning v Existing Algorithm.

A few iterations came and went with junctions and smaller scale
navigational problems - some including multiple bots at once 
until I fixed on the final idea for my project.

A Maze!

Mazes are fun - I liked this idea. Mazes already have a lot 
or research surrounding both ML and Algorithms. PAC-Man for
instance. (MORE)
So lets talk PATHFINDING
Traditional - RESEARCH
	There are lots. I'll talk about my choice.
	Dijkstra's algorithm is good but not for uniform length paths
	A* remedies this	
	
All nice and ready for me to implement.
Now to dive into
Machine Learning - RESEARCH
	Brief ML
	Idiots guide to NN
Cool so. Full Scope
*Maze
*Maze + Bug
*Maze + Bug * 2 + drivers

So thats the concept - All goals established. Hows it all going?

Current Progress
Not badly all thing considered. Coursework and exams have taken
more time away from me then planned but thats not to say I'm far
behind.
I have a maze! not just any maze. you see if I only had one maze
the NN would only be learning a specific set of instructions for
that one maze. Turn left, then right, well done you win
This is not fresh data with decisions to be made, this is
pattern recognition! so I needed a new maze every time that 
could vary size and complexity. I wanted to train this NN 
like you'd train a new skill to a person. Start small to learn
the game then build up complexity over time.
Implementation - algorithm.

So now I have options to train my NN with, ranging from empty small, 
to complex big.
Current build
Whats next?
What I've learned so far - mid point reflection
Questions








