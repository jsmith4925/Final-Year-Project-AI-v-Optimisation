
At what point does machine learning beat traditional approaches?

ABSTRACT

In the last few years machine learning has become a bit of a meme [insert people wanking over ML here]
It's usefulness has been shown in many areas, [big data example], [computer vision], [ai]. 


INTRODUCTION

with all this buzz surrounding the area how sustainable is this?
what are the limits of this technology?
In this project I aim to analyse the effectiveness of machine learning over that of traditional optimisation approaches such 
[find things here] and even brute force. At a certain point does machine learning out perform these technologies? or the other
way around.
Traditional algorithms are easy to break down. Big O being a thing. We can easily see the complexity of the algorithms.
Machine learning is the "opposite" - the more data it has the more accurate it can be. But how does this affect speed of finding
the correct answer.
Can it find a "working" solution before another approach finds an optimal one?

RESEARCH
{needs a better name, more "area background")
basically a big (structured) ramble about everything related to this area

?????

End to End Learning for Self-Driving Cars
https://arxiv.org/pdf/1604.07316.pdf
This real world application, while more focused on image recognition, shows a real world application of the ideas discussed in this paper. 
Instead of using image recognition I will instead be using distance detection sensors.

Steering Behaviors For Autonomous Characters
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.636&rep=rep1&type=pdf
Steering Behaviors in Autonomous characters has already been well discussed, here we see Craig from Sony discussing his ideas.
I can use a lot of this to develop my own autonomous pointer very quickly

Autonomous characters in virtual environments
http://etheses.dur.ac.uk/2374/1/2374_384.pdf
While a little beyond the scope of this project, interesting ideas are brought up. Mostly the use of fuzzy state machines. 
This again is good to show areas this project can move into.

Game AI: Simulating Car Racing Game by Applying Pathfinding Algorithms
http://www.ijmlc.org/papers/82-A1090.pdf
Past approaches to the problem in the form of waypoints. Discusses benefits of each and why it works well. 
This is what weâ€™re hoping to beat.

Optimization-based Motion Planning in Virtual Driving Scenarios with Application to Communicating Autonomous Vehicles
https://arxiv.org/pdf/1801.07612.pdf
Discusses the ways of modelling cars to a realistic standard. It then leads onto maze solving which is A*
We can set this as an aim and take many of the maths pointers for car simulation.


AIMS, GOALS, SCOPE
(what)
I have decided to tackle this in a practical way. Developing a task that can either
be optimally solved by a simple existingalgorithm (A* or brute force) or solved by
renforcement learning.
[possibilities here]
The choice I have landed on involves pathfinding and route optimisation.

APPROACHES
[possibilities -> how]
The end goal of this project is to build a task/challenge that can be solved by
both Reenforcement learning and traditional route finding algorithms.
My plan is to create a 'map/path generator' which produces a random route to be solved.
This will consit of a grid (size variable) with either filled or unfilled blocks.
One we have a set of data to solve I will create two instances of this map side by side
and run the [A*] algorithm on one, finding the shortest route possible, and machine learning on another.
The learning will carry over from one map to another. The aim is to see how long the program has to be running (how much data is needed)
before the machine can beat the algorithm.
This will firstly require a implemeting a car that can drive, meaning the initial maps will most likely be straight lines leading into simple 
bends and curves. Once up to speed (ahahah) then the car will be more adept at solving these problems yeah. so thats cool. [I dont really have anything else to say here. needs more]

then introduce the same map to both at once and GO its a race isnt that cool.


STRUCTURE

Development models
This will be a loosly based waterfall. large sections of waterfall and within these a mor agile approach. dealines for art yo. allwoing for creative freedom
while still providing an adequate timeline for this short scale project. [describe both in detail also one other]

Risks
Development isn't without risk, as we all know.
Time management will have to be on point. no missing deadlines. 
Illness, or any other time-loss will have to be prepared for. - overtime added.
Other courseworks/commmitments. If I don't plan around other areas I will have timetable collisions
Exams! there is a time in this project where it will not be touched for a few weeks. this needs to be prepared for.
data loss - backups will be made - Dropbox
Resources and ability. While I have planned this well to be within my capabilities, who knows. maybe I'll get stuck on
something stupid or yadayadayada

Time management
Gantt chart
big dates and stuff
admin admin admin

CONCEPTS

get drawing son


CONCLUSION/Closing remarks

The most common artificial intelligence in a racing game 
is waypoint navigation by carefully placing waypoints (nodes) 
in  the  game  environment  to  move  the  game-controlled  
characters between each point. This is a very time consuming 
and  CPU  intensive  problem.  Using  the  A*  algorithm  can  			- Basically
effectively  solve  the  pathfinding  problem  in  a  static  racing  
game  environment;  therefore,  we  present  two  modified  A*  
algorithm   instead   of   putting   waypoints   by   hand   and   
minimum  the  lap  time.  Finally,  we  propose  a  more  general  
dynamic  algorithm  which  can  solve  the  random  obstacles  
avoidance problem in a racing game. All the three algorithms 
are able to find the path for a car racing game and can save 
the most import resource in game, CPU cycles.  







